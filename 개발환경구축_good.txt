docker 윈도우 환경 구성

참고주소1 : 도커 https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html
참고주소2 : 멀티노드 http://seokjun.kr/docker-nginx-node/
참고주소3 : 도커기본 http://blog.naver.com/alice_k106/220646382977

< docker 환결 구성 > 
1. docker 설치
2. 윈도우 가상화 활서오하
2.1 powershell 관리자 권한으로 실행
2.2 윈도우 가상화 활성화
 - powershell 을 관리자 권한으로 실행
 - Enable-WindowsOptionalFeature -Online -FeatureName:Microsoft-Hyper-V -All
3. 가상화 가능 여부 확인1
 - 작업관리자 > CPU : 가상화, Hyper-V지원
4. 가상화 가능 여부 확인2
 - cmd > systeminfo : 가상화옵션 4가지가 모두 on 이여야 함
5. 가상화 : 사용안함 되어 있얼 것이다.
6. 가상화를 사용하려면
 - os x 로부팅
 - 설정 > 시동디스크 > 윈도우로 부팅
 - 가상화가 활성화 됨을 확인 할 수 있다.

< docker 기본 명령어 > 
1. 실행중인 프로세스 확인 : docker ps
2. 버전 체크
 - docker version
 - docker-compose --version
 - docker-machine --version
3. docker 전체 상태 확인 :  docker info
4. 프로세스 시작/중지
 - docker stop NAMES
 - docker start NAMES
5. 인스턴스 삭제 (stop상태일때만 가능)
 - docker rm NAMES
 - docker rm -f NAMES (삭제 잘 안될때 강제 삭제)
6. 다운로드 이미지 리스트 확인 : docker images
7. docker 로그 보기
 - docker logs NAMES
 - docker logs -f NAMES (실시간 모니터링)
 - docker logs --tail=100 NAMES (끝 100라인만 보기)
8. docker 이미지 생성 (Dockerfile필요)
 - docker build --tag node-nginx:test .
9. 생성된 이미지 조회
 - docker images
10. 이미지 삭제 (인스탄트가 rm 되었을때만 가능)
 - docker rmi IMAGE_ID
11.Dockerfile 명령어들
 - FROM : 설치할 프로그램
 - RUN : cmd(쉘)에서 명령어 실행하는것과 같음 ( RUN mkdir temp 나 RUN echo "Hello" )
 - ADD : 호스트os부터 가져올 파일명을 입력
 - 

< redis 환경 > 
1. redis (최신버전으로 설치)
 - d옵션 : 백그라운드 실행
 - p옵션 : os의 1234 port를 가상화의 6379 port와 연결됨( telnet localhost 1234 )
 - docker run -d -p 1234:6379 --name redis1 redis
2. 접속 테스트
 - > telnet localhost 1234
 - > set mykey hello
  + OK
 - > get mykey

< redis 명령어 > 
1. 상태 : info
2. 접속자 목록 : client list
3. 실시간 처리정보 확인 : monitor



< mysql 환경 > 
1. mysql client(워크벤치) 툴을 pc에 설치
 - https://dev.mysql.com/downloads/file/?id=474210
2. mysql 을 pc로 다운로드
 - > docker pull mysql/mysql-server:5.7
3. mysql 다운로드 이미지 확인
 - > docker images
4. mysql 설치 (최신버전으로 설치)
 - > docker run -d -p 3306:3306 -e MYSQL_ALLOW_EMPTY_PASSWORD=true --name mysql mysql:5.7
5. 접속 테스트
 - > mysql -h127.0.0.1 -uroot

< nginx 환경 > 
1. nginx 설치 (최신버전으로 설치됨)
 - > docker run -d -p 80:80 --name web_nginx nginx
2. docker에서 os의 C드라이브를 접근 할수 있도록 허용 처리
 - docker GUI 프로그램 > settings > Shared Drivers > C 체크 허용
3. nginx 설치 실행 경로 지정
 - /usr/share/nginx/html 는 도커 내부 설치 경로로 보여짐
 - /etc/nginx/conf.d/default.conf 는 도커 내부 설치 경로로 보여짐
 - > docker run -d -p 80:80 --name web_nginx -v C:\docker\nginx\www_root:/usr/share/nginx/html nginx 
4. conf 파일 수정
 - # conf파일 뽑아 내기
 - > docker cp web_nginx:/etc/nginx/nginx.conf default.conf 
 - # 변경한 conf반영하기 ( -v A:B 는 OS의 A폴더를 도커의 B폴더로 링크함 )
 - > docker run -d -p 80:80 --name web_nginx -v C:/docker/nginx/nginx.conf:/etc/nginx/nginx.conf -v C:/docker/nginx:/nginx nginx 

< node.js 환경 >
1. node.js 윈도우 버전 설치
2. 프로젝트 폴터 생성 nodepjt
3. 샘플 pjt 생성
 - > npm init -f
 - > npm i --save express uuid
4. 샘플 소스를 작성한다. index.js
5. 샘플 소스를 실행한다.
 - > node index.js

< node.js를 docker에서 실행 >
1. node_modules 를 복사하는 일이 없도록 도커 무시 파일 생성 (.dockerignore)
 파일 내용은 "node_modules"만 입력하고 저장
2. Dockerfile 파일 생성
 FROM node
 COPY package.json /src/package.json
 RUN cd /src; npm install
 COPY . /src
 EXPOSE 3000
 WORKDIR /src

 CMD node index.js
3. 도커파일 이미지 빌드  ( 맨뒤에 . 누락 주의 )
 - > docker build --tag node-nginx:test .
4. 생성 된 이미지 확인
 - > docker images
5. 실행하기
 - > docker run --name node-nginx1 -d -p 3000:3000 node-nginx:test
6. 접속 테스트
 - 브라우저에서 http://localhost:3000/


< node.js를 멀티 노드 및 클러스터링없는이중화 >
1. 3개 노드 실행
- > docker run --name node-nginx1 -d -p 3000:3000 node-nginx:test
- > docker run --name node-nginx2 -d -p 3001:3000 node-nginx:test
- > docker run --name node-nginx3 -d -p 3002:3000 node-nginx:test
2. nginx 노드 밸런싱 설정
 - nginx_multinode.conf 생성 (생성경로 c:\docker\nginx\)
 - * 주의 * 할 점은 upstream server의 ip는 OS의 IP로 기재
3. docker 빌드 컨피그 생성
 - Dockerfile
  FROM nginx
  COPY nginx_multinode.conf /etc/nginx/nginx.conf
4. 도커 이미지 생성
 - nginx/Dockerfile이 있는 폴더로 이동
 - > docker build --tag node-nginx-lb:test .
5. 이미지로 도커 실행
 - > docker run -d --name node-nginx-lb -p 5000:80 node-nginx-lb:test
6. 새로고침 할때 마다 다른 서버로 접속하는거 막기
 - "least_conn", "ip_hash" 등의 옵션이 있음, nginx plus버전에서는 zone옵션이있고(was가 센션 클러스터링 동기화 제공함, sticky cookie)
 - nginx conf파일 upstream에 "ip_hash;" 추가

< node.js 세션 클러스터링 >
1. 관련 패키지 설치
 - > npm install connect-redis express-session 
 - > npm install blue-tape (단위 테스트 지원)
 - > npm install cookie-parser
2. 세션 컨트롤 작성
 - session_redis.js
3. DockerFile 시작 파일 변경
 " CMD node session_redis.js "로
4. 재빌드 
 - > cd nodepjt
 - > docker rmi NAMES (기존이미지 지우고)
 - > docker build --tag node-nginx:test .
5. 노드 실행
 - > docker run --name node-nginx1 -d -p 3000:5000 node-nginx:test
 - > docker run --name node-nginx2 -d -p 3001:5000 node-nginx:test
 - > docker run --name node-nginx3 -d -p 3002:5000 node-nginx:test
5. nginx 클러스터 실행
 - c:\docker\nginx\로 폴더 이동
 - > DockerFile의 EPOSE PORT를 5000으로 맞춰줘야 함
 - > docker rmi NAMES (기존이미지 지우고)
 - > docker build --tag node-nginx-lb:test .
 - > docker run -d --name node-nginx-lb -p 4000:80 node-nginx-lb:test


 < HOST IP변경 되었을때 해줘야 하는 것들 >
1. Redis 서버 IP변경
2. nginx_multinode.conf의 3대 서버 IP변경
 - 502 Bad Gateway 에러가 남

< websocket 환경 구성 >
1. sockjs 패키지 설치
 - npm install sockjs node-static
 - npm sockjs-express
2. 


< mysql 데이터 복구 >
1.관련 프로그램 설치
 - mysql-utilities
 - mysql-connector-python

2.데이터 기존 파일에서 sql문 추출하기
 - mysqlfrm --diagnostic ./ create_table.sql